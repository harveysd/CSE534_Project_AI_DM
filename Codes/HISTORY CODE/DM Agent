{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":["uYs7bzS9ASMw"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!apt-get update\n","!apt-get install -y portaudio19-dev python3-pyaudio\n","!pip install PyAudio"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vzomZhckA5Ym","executionInfo":{"status":"ok","timestamp":1733438996745,"user_tz":300,"elapsed":22200,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}},"outputId":"6751a134-8dcc-487e-a262-46367d56b166"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["\r0% [Working]\r            \rGet:1 http://security.ubuntu.com/ubuntu jammy-security InRelease [129 kB]\n","Get:2 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease [3,626 B]\n","Get:3 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease [1,581 B]\n","Get:4 https://r2u.stat.illinois.edu/ubuntu jammy InRelease [6,555 B]\n","Hit:5 http://archive.ubuntu.com/ubuntu jammy InRelease\n","Get:6 http://archive.ubuntu.com/ubuntu jammy-updates InRelease [128 kB]\n","Get:7 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  Packages [1,190 kB]\n","Get:8 http://security.ubuntu.com/ubuntu jammy-security/universe amd64 Packages [1,225 kB]\n","Hit:9 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n","Get:10 http://security.ubuntu.com/ubuntu jammy-security/main amd64 Packages [2,454 kB]\n","Hit:11 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n","Get:12 https://r2u.stat.illinois.edu/ubuntu jammy/main amd64 Packages [2,624 kB]\n","Get:13 http://archive.ubuntu.com/ubuntu jammy-backports InRelease [127 kB]\n","Hit:14 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n","Get:15 https://r2u.stat.illinois.edu/ubuntu jammy/main all Packages [8,525 kB]\n","Get:16 http://archive.ubuntu.com/ubuntu jammy-updates/multiverse amd64 Packages [53.3 kB]\n","Get:17 http://archive.ubuntu.com/ubuntu jammy-updates/universe amd64 Packages [1,514 kB]\n","Get:18 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages [2,738 kB]\n","Get:19 http://archive.ubuntu.com/ubuntu jammy-updates/restricted amd64 Packages [3,446 kB]\n","Fetched 24.2 MB in 3s (8,490 kB/s)\n","Reading package lists... Done\n","W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n","Reading package lists... Done\n","Building dependency tree... Done\n","Reading state information... Done\n","The following additional packages will be installed:\n","  libportaudio2 libportaudiocpp0\n","Suggested packages:\n","  portaudio19-doc python-pyaudio-doc\n","The following NEW packages will be installed:\n","  libportaudio2 libportaudiocpp0 portaudio19-dev python3-pyaudio\n","0 upgraded, 4 newly installed, 0 to remove and 50 not upgraded.\n","Need to get 213 kB of archives.\n","After this operation, 1,043 kB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libportaudio2 amd64 19.6.0-1.1 [65.3 kB]\n","Get:2 http://archive.ubuntu.com/ubuntu jammy/universe amd64 libportaudiocpp0 amd64 19.6.0-1.1 [16.1 kB]\n","Get:3 http://archive.ubuntu.com/ubuntu jammy/universe amd64 portaudio19-dev amd64 19.6.0-1.1 [106 kB]\n","Get:4 http://archive.ubuntu.com/ubuntu jammy/universe amd64 python3-pyaudio amd64 0.2.11-1.3ubuntu1 [25.9 kB]\n","Fetched 213 kB in 1s (261 kB/s)\n","Selecting previously unselected package libportaudio2:amd64.\n","(Reading database ... 123632 files and directories currently installed.)\n","Preparing to unpack .../libportaudio2_19.6.0-1.1_amd64.deb ...\n","Unpacking libportaudio2:amd64 (19.6.0-1.1) ...\n","Selecting previously unselected package libportaudiocpp0:amd64.\n","Preparing to unpack .../libportaudiocpp0_19.6.0-1.1_amd64.deb ...\n","Unpacking libportaudiocpp0:amd64 (19.6.0-1.1) ...\n","Selecting previously unselected package portaudio19-dev:amd64.\n","Preparing to unpack .../portaudio19-dev_19.6.0-1.1_amd64.deb ...\n","Unpacking portaudio19-dev:amd64 (19.6.0-1.1) ...\n","Selecting previously unselected package python3-pyaudio.\n","Preparing to unpack .../python3-pyaudio_0.2.11-1.3ubuntu1_amd64.deb ...\n","Unpacking python3-pyaudio (0.2.11-1.3ubuntu1) ...\n","Setting up libportaudio2:amd64 (19.6.0-1.1) ...\n","Setting up libportaudiocpp0:amd64 (19.6.0-1.1) ...\n","Setting up portaudio19-dev:amd64 (19.6.0-1.1) ...\n","Setting up python3-pyaudio (0.2.11-1.3ubuntu1) ...\n","Processing triggers for libc-bin (2.35-0ubuntu3.4) ...\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc.so.2 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtcm.so.1 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libur_adapter_opencl.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libur_adapter_level_zero.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbmalloc_proxy.so.2 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_0.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbb.so.12 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libhwloc.so.15 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtcm_debug.so.1 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libtbbbind_2_5.so.3 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libur_loader.so.0 is not a symbolic link\n","\n","/sbin/ldconfig.real: /usr/local/lib/libumf.so.0 is not a symbolic link\n","\n","Requirement already satisfied: PyAudio in /usr/lib/python3/dist-packages (0.2.11)\n"]}]},{"cell_type":"code","execution_count":7,"metadata":{"id":"u2pfl9i7MSsh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733439027403,"user_tz":300,"elapsed":3612,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}},"outputId":"51a5ad36-09b2-428e-f9cd-ec62bfafe64d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: openai in /usr/local/lib/python3.10/dist-packages (1.54.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (3.8.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (3.4.2)\n","Requirement already satisfied: anyio<5,>=3.5.0 in /usr/local/lib/python3.10/dist-packages (from openai) (3.7.1)\n","Requirement already satisfied: distro<2,>=1.7.0 in /usr/local/lib/python3.10/dist-packages (from openai) (1.9.0)\n","Requirement already satisfied: httpx<1,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from openai) (0.28.0)\n","Requirement already satisfied: jiter<1,>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from openai) (0.8.0)\n","Requirement already satisfied: pydantic<3,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from openai) (2.10.2)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.10/dist-packages (from openai) (1.3.1)\n","Requirement already satisfied: tqdm>4 in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.6)\n","Requirement already satisfied: typing-extensions<5,>=4.11 in /usr/local/lib/python3.10/dist-packages (from openai) (4.12.2)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (4.55.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.4.7)\n","Requirement already satisfied: numpy<2,>=1.21 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (11.0.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (3.2.0)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (3.10)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5,>=3.5.0->openai) (1.2.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (2024.8.30)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx<1,>=0.23.0->openai) (1.0.7)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai) (0.14.0)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.27.1 in /usr/local/lib/python3.10/dist-packages (from pydantic<3,>=1.9.0->openai) (2.27.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib) (1.16.0)\n"]}],"source":["!pip install openai matplotlib networkx"]},{"cell_type":"code","source":["import openai\n","import json\n","import os\n","import glob\n","import random\n","from time import sleep\n","import wave\n","import requests\n","import pyaudio\n","import matplotlib.pyplot as plt\n","import networkx as nx #python package for networks\n","import numpy as np\n","from openai import OpenAI\n","\n","from google.colab import drive , userdata\n","drive.mount('/content/drive')"],"metadata":{"id":"0d8l4xTA_8Sq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733439059273,"user_tz":300,"elapsed":29263,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}},"outputId":"b9b6ea30-7151-44c1-bb8d-24192db36292"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["# Tools"],"metadata":{"id":"V7kkh-yECmkb"}},{"cell_type":"code","source":["# dictionary of tools\n","tools = {\n","   \"spawn_npc\": {\n","        \"description\": \"Spawns NPCs at a specified location based on the game state.\",\n","        \"function\": PLACEHOLDER(),  # TODO Reference to the actual function\n","        \"parameters\": [\"location\", \"game_state\"]\n","    },\n","    \"spawn_enemy\": {\n","        \"description\": \"Spawns a random enemy with its attributes.\",\n","        \"function\": PLACEHOLDER(), # TODO Reference to the actual function\n","        \"parameters\": []\n","    },\n","    \"skill_check\": {\n","        \"description\": \"Make a skill check.\",\n","        \"function\": PLACEHOLDER(),  # TODO Reference to the actual function\n","        \"parameters\": [\"skill\", \"modifier\"]\n","    },\n","    \"combat\": {\n","        \"description\": \"Perform combat actions.\",\n","        \"function\": PLACEHOLDER(),  # TODO Reference to the actual function\n","        \"parameters\": [\"action\", \"target\"]\n","    },\n","    \"inventory\": {\n","        \"description\": \"Manage the player's inventory.\",\n","        \"function\": PLACEHOLDER(),  # TODO Reference to the actual function\n","        \"parameters\": [\"action\", \"item\"]\n","    },\n","    \"tts\": {\n","        \"description\": \"Text-to-Speech conversion.\",\n","        \"function\": tts(),  # TTS takes the voice we want to use, the text we want to say, and the client(APIKEY) that is being charged. Then streams the voice, isn't saved anywhere.\n","        \"parameters\": [\"voice\",\"text\", \"client\"]\n","    },\n","    \"image_generation\": {\n","        \"description\": \"Generate images based on a given prompt.\",\n","        \"function\": img_gen(),  # img_gen takes a prompt and image name\n","        \"parameters\": [\"prompt\", \"image_name\"]\n","    },\n","    \"Worldmap_creation\": {\n","        \"description\": \"Create a new world map based on the game state.\",\n","        \"function\": createVillage,\n","        \"parameters\": [\"GameMap()\"]\n","    },\n","    \"Worldmap_show\": {\n","        \"description\": \"Display the current world map.\",\n","        \"function\": GameMap.drawWorldMap,\n","        \"parameters\": [\"currentLocation\"]\n","    },\n","    \"group_creation\": {\n","        \"description\": \"Create a new group with characters.\",\n","        \"function\": group_creation,\n","        \"parameters\": []\n","    },\n","    \"dungeonmap_creation\": {\n","        \"description\": \"Create a new dungeon map based on the game state.\",\n","        \"function\": createDungeon,\n","        \"parameters\": [\"rows\", \"cols\"]\n","    },\n","    \"dungeonmap_show\": {\n","        \"description\": \"Display the current dungeon map.\",\n","        \"function\": DugeonMap.drawDungeonMap,\n","        \"parameters\": []\n","    },\n","    \"player_move\": {\n","        \"description\": \"Move the player in a specified direction.\",\n","        \"function\": DungeonMap.movePlayer,\n","        \"parameters\": [\"direction\"]\n","    },\n","    \"room_creation\": {\n","        \"description\": \"Create a new room based on the game state.\",\n","        \"function\": generate_room_details,\n","        \"parameters\": [\"room_id\", \"game_state\"]\n","    },\n","    \"save_game\": {\n","        \"description\": \"Save the current game state to a JSON file.\",\n","        \"function\": PLACEHOLDER(),  # TODO Reference to the actual function\n","        \"parameters\": [\"filename\"]\n","    },\n","    \"load_game\": {\n","        \"description\": \"Load a game state from a JSON file.\",\n","        \"function\": PLACEHOLDER(),  # TODO Reference to the actual function\n","        \"parameters\": [\"filename\"]\n","    }\n","}"],"metadata":{"id":"WFFt9bw8Eeox","colab":{"base_uri":"https://localhost:8080/","height":216},"executionInfo":{"status":"error","timestamp":1733439096509,"user_tz":300,"elapsed":115,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}},"outputId":"3a949d7f-84f7-4edd-e6a0-b2093f41ef98"},"execution_count":11,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'PLACEHOLDER' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-90d958567580>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m    \"spawn_npc\": {\n\u001b[1;32m      4\u001b[0m         \u001b[0;34m\"description\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"Spawns NPCs at a specified location based on the game state.\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m         \u001b[0;34m\"function\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mPLACEHOLDER\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# TODO Reference to the actual function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0;34m\"parameters\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"location\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"game_state\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     },\n","\u001b[0;31mNameError\u001b[0m: name 'PLACEHOLDER' is not defined"]}]},{"cell_type":"markdown","source":["# Functions"],"metadata":{"id":"GuBTuS7VCqew"}},{"cell_type":"markdown","source":["### Load Game"],"metadata":{"id":"lfJQyYzBDTXL"}},{"cell_type":"markdown","source":["### Save Game"],"metadata":{"id":"wd0FsG6ODQm0"}},{"cell_type":"markdown","source":["### TTS"],"metadata":{"id":"oidNTZouDuvx"}},{"cell_type":"code","source":["def tts(voice='onyx', input=\"\"\" \"\"\", client)\n","\n","    p = pyaudio.PyAudio()\n","    stream = p.open(format=8, channels=1,\n","                rate=24_000,\n","                output=True)\n","\n","    with client.audio.speech.with_streaming_response.create(\n","        model=\"tts-1\", voice=voice, input=input,\n","        response_format=\"pcm\"\n","    ) as response:\n","        for chunk in response.iter_bytes(1024):\n","            stream.write(chunk)\n","    p.close()"],"metadata":{"id":"PIcTV4duc6R4","colab":{"base_uri":"https://localhost:8080/","height":108},"executionInfo":{"status":"error","timestamp":1733439114631,"user_tz":300,"elapsed":107,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}},"outputId":"0410bd5b-74d0-4448-ad95-2af5db7e48be"},"execution_count":12,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"non-default argument follows default argument (<ipython-input-12-5e92aba8a4ee>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-12-5e92aba8a4ee>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    def tts(voice='onyx', input=\"\"\" \"\"\", client)\u001b[0m\n\u001b[0m                                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m non-default argument follows default argument\n"]}]},{"cell_type":"markdown","source":["### Image Generation"],"metadata":{"id":"36sCGo7nDwiP"}},{"cell_type":"markdown","source":["I need to do a little tweaking on this."],"metadata":{"id":"KKuxsPHEn-43"}},{"cell_type":"code","source":[" def img_gen(prompt, image_name):\n","    # Set the engine to the current base model of stable diffusion, using our personal API key.\n","    ENGINE_ID = \"stable-diffusion-xl-1024-v1-0\"\n","    API_HOST = os.getenv('API_HOST', 'https://api.stability.ai')\n","    API_KEY = os.getenv(\"STABILITY_API_KEY\")\n","\n","    # Set header to use our key, and ask for the JSON file containing the image information\n","    HEADER = {\"Content-Type\": \"application/json\", \"Accept\": \"application/json\",\n","            \"Authorization\": f\"Bearer {API_KEY}\"}\n","\n","    # The body sets up the prompt from GPT to create the room. Appends the fact\n","    # that we want the pictures to be the old-style sepia drawings\n","    BODY={\"text_prompts\":\n","        [{\"text\": prompt},\n","        {\"text\": \"Role-playing game (RPG) style fantasy. Sepia, line drawing\"}],\n","        \"cfg_scale\": 7, \"height\": 1024, \"width\": 1024, \"samples\": 1,\n","        \"steps\": 30,}\n","\n","    response = requests.post(f\"{API_HOST}/v1/generation/{ENGINE_ID}/text-to-image\",\n","        headers=HEADER, json=BODY,)\n","\n","    if response.status_code != 200:\n","        raise Exception(\"Non-200 response: \" + str(response.text))\n","\n","    data = response.json()\n","    file_name = f\"generated_image_{image_name}.png\"\n","\n","    with open(file_name, \"wb\") as f:\n","      f.write(base64.b64decode(data[\"artifacts\"][0][\"base64\"]))\n","\n","    # This will need to be updated to save to a our game state\n","    return [image_name, prompt, file_name]"],"metadata":{"id":"WzLUP0L-naOU","executionInfo":{"status":"ok","timestamp":1733439148756,"user_tz":300,"elapsed":87,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["### Group/Character Creation"],"metadata":{"id":"kACBpBLzEJIX"}},{"cell_type":"code","execution_count":26,"metadata":{"id":"BhmHbkfzKH-L","executionInfo":{"status":"ok","timestamp":1733439597933,"user_tz":300,"elapsed":89,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}}},"outputs":[],"source":["import json\n","import glob\n","\n","\n","class Inventory:\n","    def __init__(self, name, description, price=0, healing_power=0, damage=0):\n","\n","        self.name = name\n","        self.description = description\n","        self.price = price\n","        self.healing_power = healing_power\n","        self.damage = damage\n","\n","    def display(self):\n","        \"\"\"Display item details\"\"\"\n","        print(f\"Item: {self.name}\")\n","        print(f\"Description: {self.description}\")\n","        print(f\"Price: {self.price} gold\")\n","        if self.damage > 0:\n","            print(f\"Damage: {self.damage}\")\n","        if self.healing_power > 0:\n","            print(f\"Healing Power: {self.healing_power}\")\n","\n","    def to_dict(self):\n","        return {\n","            'name': self.name,\n","            'description': self.description,\n","            'price': self.price,\n","            'healing_power': self.healing_power\n","        }\n","\n","    @classmethod\n","    def from_dict(cls, data):\n","        return cls(\n","            data['name'],\n","            data['description'],\n","            data.get('price', 0),\n","            data.get('healing_power', 0)\n","        )\n","\n","\n","\n","\n","class Character:\n","    def __init__(self, name, char_class, description, status = True):\n","        self.name = name\n","        self.char_class = char_class\n","        self.lvl_exp = 0\n","        self.lvl = self.lvl_exp // 100\n","        self.armor = 0\n","        if char_class == 'Fighter':\n","            self.max_hp = 95 + int(self.lvl * 2)\n","            self.hp = 95 + int(self.lvl * 2) + (self.armor * 5)\n","            self.atk = 85 + int(self.lvl * 5)\n","            self.intelligence = 60 + int(self.lvl * 1)\n","            self.dex = 70 + int(self.lvl * 3)\n","        elif char_class == 'Rogue':\n","            self.max_hp = 70 + int(self.lvl * 2)\n","            self.hp = 70 + int(self.lvl * 2) + (self.armor * 5)\n","            self.atk = 80 + int(self.lvl * 1)\n","            self.intelligence = 75 + int(self.lvl * 3)\n","            self.dex = 90 + int(self.lvl * 5)\n","        elif char_class == 'Mage':\n","            self.max_hp = 60 + int(self.lvl * 1)\n","            self.hp = 60 + int(self.lvl * 2) + (self.armor * 5)\n","            self.atk = 75 + int(self.lvl * 3)\n","            self.intelligence = 95 + int(self.lvl * 5)\n","            self.dex = 65 + int(self.lvl * 1)\n","        self.description = description\n","        self.status = status\n","\n","    def add_exp(self, exp):\n","        self.lvl += exp // 100\n","        self.lvl_exp += exp % 100\n","\n","\n","    def damage_taken(self, damage):\n","        self.hp -= (damage - self.armor)\n","        if self.hp <= 0:\n","            self.hp = 0\n","            self.status = False\n","            print(self.name + ' has died')\n","\n","    def heal(self, hp):\n","        self.hp += hp\n","        if self.hp > self.max_hp:\n","            self.hp = self.max_hp\n","\n","    def add_exp(self, exp):\n","        self.lvl += exp // 100\n","        self.lvl_exp += exp % 100\n","\n","    def display(self):\n","        print('Name: ' + self.name)\n","        print(' Description: ' + self.description)\n","        print(' Class: ' + self.char_class)\n","        print(' HP: ' + str(self.hp))\n","        print(' Attack: ' + str(self.atk))\n","        print(' Intelligence: ' + str(self.intelligence))\n","        print(' Dexterity: ' + str(self.dex))\n","        print(' Level: ' + str(self.lvl))\n","\n","\n","    def to_dict(self):\n","        \"\"\"Convert character to dictionary for JSON serialization\"\"\"\n","        return {\n","            'name': self.name,\n","            'char_class': self.char_class,\n","            'description': self.description,\n","            'hp': self.hp,\n","            'atk': self.atk,\n","            'intelligence': self.intelligence,\n","            'dex': self.dex,\n","            'lvl': self.lvl,\n","            'lvl_exp': self.lvl_exp,\n","        }\n","\n","    @classmethod\n","    def from_dict(cls, data):\n","        character = cls(data['name'], data['char_class'], data['description'])\n","        character.hp = data['hp']\n","        character.atk = data['atk']\n","        character.intelligence = data['intelligence']\n","        character.dex = data['dex']\n","        character.lvl = data['lvl']\n","        character.lvl_exp = data['lvl_exp']\n","        return character\n","\n","\n","\n","\n","\n","\n","\n","class Group:\n","    def __init__(self, name, members, description):\n","        self.name = name\n","        self.description = description\n","        self.members = members\n","        self.inventory = {}\n","        self.gold = 0\n","\n","    def display(self):\n","        print('Group Name: ' + self.name)\n","        print('Description: ' + self.description)\n","        for member in self.members:\n","            print(member.display())\n","\n","\n","    def to_dict(self):\n","        return {\n","            'name': self.name,\n","            'description': self.description,\n","            'members': [member.to_dict() for member in self.members],\n","            'inventory': [item.to_dict for item in self.inventory],\n","            'gold': self.gold\n","        }\n","\n","    @classmethod\n","    def from_dict(cls, data):\n","        members = [Character.from_dict(member_data) for member_data in data['members']]\n","        group = cls(data['name'], members, data['description'])\n","        group.gold = data['gold']\n","        group.inventory = [Inventory.from_dict(item_data) for item_data in data['inventory']]\n","        return group\n","\n","    def killed_member(self):\n","      for member in self.members:\n","        if member.status == False:\n","          self.members.remove(member)\n","\n","    def buying_item(self, item):\n","      if item.price > self.gold:\n","        print('You do not have enough gold')\n","        return\n","      self.gold -= item.price\n","      self.inventory.append(item)\n","\n","    def selling_item(self, item):\n","      self.gold += item.price\n","      self.inventory.remove(item)\n","\n","    def use_healing_item(self, item, member):\n","      for m in self.members:\n","        if m == member:\n","          m.heal(item.healing_power)\n","          self.inventory.remove(item)\n","          return\n","\n","    def find_item(self, item_name):\n","      self.inventory.append(item_name)\n","      return\n","\n","    def lose_item(self, item_name):\n","      self.inventory.remove(item_name)\n","      return\n","\n","# Lesser and Greater potion\n","# Armor and weapons\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","\n","def save_game(group):\n","    filename = input(\"Enter the name of the save file: \")\n","    try:\n","        with open(filename + '.json', 'w') as f:\n","            json.dump(group.to_dict(), f, indent=4)\n","        print(f\"Game saved successfully to {filename}\")\n","    except Exception as e:\n","        print(f\"Error saving game: {str(e)}\")\n","\n","\n","\n","\n","def load_game():\n","    \"\"\"Load the game state from a JSON file\"\"\"\n","    json_files = glob.glob('*.json')\n","    for file in json_files:\n","        print(file)\n","\n","    filename = input(\"Enter the name of the save file to load: \")\n","    try:\n","        with open(filename, 'r') as f:\n","            data = json.load(f)\n","        group = Group.from_dict(data)\n","        print(f\"Game loaded successfully from {filename}\")\n","        return group\n","    except FileNotFoundError:\n","        print(f\"No save file found at {filename}\")\n","        return None\n","    except Exception as e:\n","        print(f\"Error loading game: {str(e)}\")\n","        return None\n","\n","\n","\n","def group_creation():\n","  class_choices = ['Fighter', 'Rogue', 'Mage']\n","  print('To start the game you need to make your group and characters!')\n","  group_name = input(\"What will be the name of your Adventuring Group? \")\n","  num_members = 0\n","  while(num_members < 1 or num_members > 10):\n","    num_members = int(input(\"How many members will be in your group? \"))\n","    if(num_members < 1 or num_members > 10):\n","      print(\"Invalid number of members (Pick a number 1 through 10)\")\n","  membs = []\n","  for x in range(num_members):\n","    name = input(\"What will be the name of character {}?\".format(x + 1))\n","    char_class_num = 0\n","    while((char_class_num < 1 or char_class_num > 3) and char_class_num % 1 == 0):\n","      char_class_num = int(input(\"Choose a class (enter the number): \\n  1. Fighter \\n  2. Rogue \\n  3. Mage \\n\"))\n","      if (char_class_num < 1 or char_class_num > 3) and char_class_num % 1 == 0:\n","        print(\"Invalid input\")\n","    char_description = input(\"Describe your character: \")\n","    char_class = class_choices[int(char_class_num) - 1]\n","    membs.append(Character(name, char_class, char_description))\n","  group_description = input(\"Describe your group: \")\n","  return Group(group_name, membs, group_description)"]},{"cell_type":"code","source":["\n","# class Character:\n","#     def __init__(self, name, char_class, description, status = True):\n","#         self.name = name\n","#         self.char_class = char_class\n","#         self.status = status\n","#         self.lvl_exp = 0\n","#         self.lvl = self.lvl_exp // 100\n","#         self.inventory = []\n","\n","#         if char_class == 'Fighter':\n","#             self.hp = 95 + int(self.lvl * 2)\n","#             self.atk = 85 + int(self.lvl * 5)\n","#             self.intelligence = 60 + int(self.lvl * 1)\n","#             self.dex = 70 + int(self.lvl * 2)\n","#         elif char_class == 'Rogue':\n","#             self.hp = 70\n","#             self.atk = 75\n","#             self.intelligence = 75\n","#             self.dex = 90\n","#         elif char_class == 'Mage':\n","#             self.hp = 60\n","#             self.atk = 75\n","#             self.intelligence = 95\n","#             self.dex =65\n","#         self.description = description\n","\n","#     def add_exp(self, exp):\n","#         self.lvl += exp // 100\n","#         self.lvl_exp += exp % 100\n","\n","\n","#     def damage_taken(self, damage):\n","#         self.hp -= damage\n","#         if self.hp <= 0:\n","#             self.hp = 0\n","#             self.status = False\n","#             print(self.name + ' has died')\n","#             group.members.remove(self)\n","\n","#     def display(self):\n","#         print('Name: ' + self.name)\n","#         print(' Description: ' + self.description)\n","#         print(' Class: ' + self.char_class)\n","#         print(' HP: ' + str(self.hp))\n","#         print(' Attack: ' + str(self.atk))\n","#         print(' Intelligence: ' + str(self.intelligence))\n","#         print(' Dexterity: ' + str(self.dex))\n","#         print(' Level: ' + str(self.lvl))\n","\n","\n","#     def to_dict(self):\n","#         \"\"\"Convert character to dictionary for JSON serialization\"\"\"\n","#         return {\n","#             'name': self.name,\n","#             'char_class': self.char_class,\n","#             'description': self.description,\n","#             'hp': self.hp,\n","#             'atk': self.atk,\n","#             'intelligence': self.intelligence,\n","#             'dex': self.dex,\n","#             'lvl': self.lvl,\n","#             'lvl_exp': self.lvl_exp,\n","#             'inventory': self.inventory\n","#         }\n","\n","#     @classmethod\n","#     def from_dict(cls, data):\n","#         character = cls(data['name'], data['char_class'], data['description'])\n","#         character.hp = data['hp']\n","#         character.atk = data['atk']\n","#         character.intelligence = data['intelligence']\n","#         character.dex = data['dex']\n","#         character.lvl = data['lvl']\n","#         character.lvl_exp = data['lvl_exp']\n","#         character.inventory = data['inventory']\n","#         return character\n","\n","# class Group:\n","#     def __init__(self, name, members, description):\n","#         self.name = name\n","#         self.description = description\n","#         self.members = members\n","#         self.inventory = []\n","\n","#     def display(self):\n","#         print('Group Name: ' + self.name)\n","#         print('Description: ' + self.description)\n","#         for member in self.members:\n","#             print(member.display())\n","\n","\n","#     def to_dict(self):\n","#         return {\n","#             'name': self.name,\n","#             'description': self.description,\n","#             'members': [member.to_dict() for member in self.members]\n","#         }\n","\n","#     @classmethod\n","#     def from_dict(cls, data):\n","#         members = [Character.from_dict(member_data) for member_data in data['members']]\n","#         return cls(data['name'], members, data['description'])\n","\n","# # Functions for GPT tools\n","# def group_creation():\n","#   class_choices = ['Fighter', 'Rogue', 'Mage']\n","#   print('To start the game you need to make your group and characters!')\n","#   group_name = input(\"What will be the name of your Adventuring Group? \")\n","#   num_members = 0\n","#   while(num_members < 1 or num_members > 10):\n","#     num_members = int(input(\"How many members will be in your group? \"))\n","#     if(num_members < 1 or num_members > 10):\n","#       print(\"Invalid number of members (Pick a number 1 through 10)\")\n","#   membs = []\n","#   for x in range(num_members):\n","#     name = input(\"What will be the name of character {}?\".format(x + 1))\n","#     char_class_num = 0\n","#     while((char_class_num < 1 or char_class_num > 3) and char_class_num % 1 == 0):\n","#       char_class_num = int(input(\"Choose a class (enter the number): \\n  1. Fighter \\n  2. Rogue \\n  3. Mage \\n\"))\n","#       if (char_class_num < 1 or char_class_num > 3) and char_class_num % 1 == 0:\n","#         print(\"Invalid input\")\n","#     char_description = input(\"Describe your character: \")\n","#     char_class = class_choices[int(char_class_num) - 1]\n","#     membs.append(Character(name, char_class, char_description))\n","#   group_description = input(\"Describe your group: \")\n","#   return Group(group_name, membs, group_description)\n","\n","def get_character_info(group, character_name):\n","    for character in group.members:\n","        if character.name.lower() == character_name.lower():\n","            return character.to_dict()\n","    return f\"Character {character_name} not found in the group.\"\n","\n","def get_group_info(group):\n","    return group.to_dict()"],"metadata":{"id":"OiCe_mnoFMGz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Inventory(use/add)"],"metadata":{"id":"7AXEaJP_DoVv"}},{"cell_type":"markdown","source":["### World Map Creation/Show"],"metadata":{"id":"u0vE8rQCD3jI"}},{"cell_type":"code","source":["# Creates location object and bidirectional connection between locations\n","class Location:\n","    def __init__(self, name):\n","        self.name = name\n","        self.connections = []\n","\n","    def connect(self, otherLocation):\n","        self.connections.append(otherLocation)\n","        otherLocation.connections.append(self)\n","\n","# Creates World Map using networkx and matplotlib\n","class GameMap:\n","    def __init__(self):\n","        self.locations = {}\n","        self.graph = nx.Graph()\n","\n","    # Adds location to location dictionary and node to networkX\n","    def addLocation(self, name):\n","        location = Location(name)\n","        self.locations[name] = location\n","        self.graph.add_node(name)\n","\n","    # Adds edges between connecting locations\n","    def connectLocations(self, name1, name2):\n","        if name1 in self.locations and name2 in self.locations:\n","            loc1 = self.locations[name1]\n","            loc2 = self.locations[name2]\n","            loc1.connect(loc2)\n","            self.graph.add_edge(name1, name2)\n","\n","    # Sets up node locations networkX graph\n","    def drawWorldMap(self, currentLocation=None):\n","      pos = {\n","          \"Village\": (0.5, 0),\n","          \"Quests\": (-0.5, 0.75),\n","          \"Blacksmith\": (-0.5, -0.75),\n","          \"Apothecary\": (-0.5, -0.25),\n","          \"Dungeon\": (1.5, 0)\n","      }\n","\n","      # Plots matplotlib with size\n","      plt.figure(figsize=(6, 5))\n","\n","      # Draws edges as connections\n","      nx.draw_networkx_edges(self.graph, pos)\n","\n","      # Draws nodes as locations\n","      nx.draw_networkx_nodes(self.graph, pos,\n","                                node_size=1700,\n","                                node_color='lightgreen')\n","      # Draws location labels\n","      nx.draw_networkx_labels(self.graph, pos,\n","                                font_size=10)\n","\n","      # Marks current player location as orange\n","      if currentLocation and currentLocation in self.graph:\n","          nx.draw_networkx_nodes(self.graph, pos,\n","                                  nodelist=[currentLocation],\n","                                  node_color='orange', node_size=1700)\n","\n","      # Plots World Map\n","      plt.title(\"World Map\")\n","      plt.axis('off')\n","      plt.pause(0.001)\n","\n","# Creates village with added location nodes and edges\n","def createVillage(gameMap):\n","    gameMap.addLocation(\"Village\")\n","    gameMap.addLocation(\"Quests\")\n","    gameMap.addLocation(\"Blacksmith\")\n","    gameMap.addLocation(\"Apothecary\")\n","    gameMap.addLocation(\"Dungeon\")\n","\n","    gameMap.connectLocations(\"Village\", \"Quests\")\n","    gameMap.connectLocations(\"Village\", \"Blacksmith\")\n","    gameMap.connectLocations(\"Village\", \"Apothecary\")\n","    gameMap.connectLocations(\"Village\", \"Dungeon\")"],"metadata":{"id":"GQSQQemjNHSq","executionInfo":{"status":"ok","timestamp":1733439248072,"user_tz":300,"elapsed":94,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}}},"execution_count":21,"outputs":[]},{"cell_type":"markdown","source":["### Dungeon Creation/Show"],"metadata":{"id":"Oct861XMX_0c"}},{"cell_type":"code","source":["# Creates Dungeon Map as rows x cols grid map using matplotlib\n","class DungeonMap:\n","    def __init__(self, rows, cols):\n","        self.rows = rows\n","        self.cols = cols\n","        self.grid = self.generate()\n","        self.rooms = {}  # Dictionary to store Room objects\n","        self.playerPos = self.Start()\n","        self.startPos = self.Start()\n","        self.exitPos = self.Exit()\n","        self.visited = set([self.playerPos])\n","\n","    # Generates tiles\n","    def generate(self):\n","        grid = [['wall' for _ in range(self.cols)] for _ in range(self.rows)]\n","\n","        current = (1, 1)\n","\n","        # Labels initial tile R1\n","        grid[current[0]][current[1]] = Room('R1')\n","        self.rooms['R1'] = grid[current[0]][current[1]]\n","\n","        # Places room into stack\n","        stack = [current]\n","        roomCount = 1\n","\n","        while stack:\n","            current = stack.pop()\n","            neighbors = [(current[0]+x, current[1]+y) for x, y in [(0,1),(1,0),(0,-1),(-1,0)]]\n","            random.shuffle(neighbors)\n","            for nextTile in neighbors:\n","                if (0 <= nextTile[0] < self.rows and 0 <= nextTile[1] < self.cols\n","                    and grid[nextTile[0]][nextTile[1]] == 'wall'):\n","                    grid[nextTile[0]][nextTile[1]] = f'R{roomCount+1}'\n","                    stack.append(nextTile)\n","                    roomCount += 1\n","                    # Create new Room object\n","                    new_room = Room(f'R{roomCount}')\n","                    # Assign Room object to grid\n","                    self.rooms[f'R{roomCount}'] = new_room\n","                    # Store new Room object in rooms dictionary\n","                    stack.append(nextTile)\n","                    break\n","\n","        return grid\n","\n","    # Sets starting tile at R1\n","    def Start(self):\n","        for i in range(self.rows):\n","            for j in range(self.cols):\n","                if isinstance(self.grid[i][j], Room) and self.grid[i][j] == 'R1':\n","                    return (i, j)\n","        return (0, 0)\n","\n","    # Sets exit tile randomly at a valid tile that is not the start tile\n","    def Exit(self):\n","        valid = [(i, j) for i in range(self.rows) for j in range(self.cols)\n","                           if isinstance(self.grid[i][j], Room) and (i, j) != self.playerPos]\n","        exitPos = random.choice(valid)\n","        self.grid[exitPos[0]][exitPos[1]] = 'EXIT'\n","        return exitPos\n","\n","    # Draws map with matplot lib as a 2D grid\n","    def drawDungeonMap(self):\n","      fig, ax = plt.subplots(figsize=(5, 5))\n","\n","      # Sets colors of tiles depending on their descriptions\n","      for x in range(self.cols):\n","          for y in range(self.rows):\n","            if isinstance(self.grid[y][x], Room):\n","              color = 'white'\n","            elif self.grid[y][x] == 'wall':\n","              color = 'black'\n","            elif self.grid[y][x] == 'EXIT':\n","              color = 'green'\n","            elif (y, x) in self.visited:\n","              color = 'lightblue'\n","            else:\n","              color = 'white'\n","            rect = plt.Rectangle((x, y), 1, 1, edgecolor='black', facecolor=color)\n","            ax.add_patch(rect)\n","            if isinstance(self.grid[y][x], Room):\n","              ax.text(x+0.5, y+0.5, self.grid[y][x], ha='center', va='center')\n","\n","      # Creates player as a red circle on the grid\n","      player = plt.Circle((self.playerPos[1] + 0.5, self.playerPos[0] + 0.5), 0.3, color='red')\n","      ax.add_artist(player)\n","\n","      ax.set_xlim(0, self.cols)\n","      ax.set_ylim(0, self.rows)\n","      ax.set_aspect('equal')\n","      ax.invert_yaxis()\n","\n","      # Plots Dungeon Map\n","      plt.title(\"Dungeon Map\")\n","      plt.axis('off')\n","      plt.pause(0.001)\n","\n","def createDungeon(rows, cols, game_state):\n","    dungeon = DungeonMap(rows, cols)\n","    return {\n","        \"grid\": [[cell.id if isistnace(cell, Room) else cell for cell in row] for row in dungeon.grid],\n","        \"rooms\": {room_id: room.to_dict() for room_id, room in dungeon.rooms.items()},\n","        \"playerPos\": dungeon.playerPos,\n","        \"startPos\": dungeon.startPos,\n","        \"exitPos\": dungeon.exitPos,\n","        \"rows\": dungeon.rows,\n","        \"cols\": dungeon.cols\n","    }\n","\n","    # Generate details for each room\n","    for room_id in dungeon_info[\"rooms\"]:\n","        generate_room_details(room_id, game_state)\n","\n","    return dungeon_info\n","\n","def generate_room_details(room_id, game_state):\n","    room = game_state.current_dungeon[\"rooms\"][room_id]\n","\n","    # Use the game state to determine appropriate content for the room\n","    room[\"description\"] = f\"A dimly lit room with rough stone walls. Room ID: {room_id}\"\n","    room[\"items\"] = [\"torch\", \"rusty sword\"] if random.random() < 0.3 else []\n","    room[\"npcs\"] = [\"goblin\"] if random.random() < 0.2 else []\n","\n","    # Update connecting rooms based on the dungeon layout\n","    room[\"connecting_rooms\"] = [neighbor.id for neighbor in get_neighboring_rooms(room_id, game_state.current_dungeon)]\n","\n","    return room\n","\n","def get_neighboring_rooms(room_id, dungeon):\n","    neighbors = []\n","    room_coords = None\n","\n","    # Find the coordinates of the given room\n","    for i in range(dungeon[\"rows\"]):\n","        for j in range(dungeon[\"cols\"]):\n","            if dungeon[\"grid\"][i][j] == room_id:\n","                room_coords = (i, j)\n","                break\n","        if room_coords:\n","            break\n","\n","    if not room_coords:\n","        return neighbors\n","\n","    # Check adjacent cells (up, down, left, right)\n","    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n","    for dx, dy in directions:\n","        new_x, new_y = room_coords[0] + dx, room_coords[1] + dy\n","        if 0 <= new_x < dungeon[\"rows\"] and 0 <= new_y < dungeon[\"cols\"]:\n","            neighbor_id = dungeon[\"grid\"][new_x][new_y]\n","            if neighbor_id.startswith('R') or neighbor_id == 'EXIT':\n","                neighbors.append(neighbor_id)\n","\n","    return neighbors\n","\n","# Moves player either (up, down, left, right) depending on user input\n","def movePlayer(self, direction):\n","    x, y = self.playerPos\n","    newPos = {\n","        'up': (x - 1, y),\n","        'down': (x + 1, y),\n","        'left': (x, y - 1),\n","        'right': (x, y + 1)\n","    }.get(direction, (x, y))\n","\n","    # Updates new player position and marks as a visited node\n","    if (0 <= newPos[0] < self.rows) and 0 <= newPos[1] < self.cols and (isinstance(self.grid[newPos[0]][newPos[1]], Room)):\n","        self.playerPos = newPos\n","        self.visited.add(newPos)\n","        return True\n","    return False"],"metadata":{"id":"fLPR-DF0YJ5Z","executionInfo":{"status":"ok","timestamp":1733439309867,"user_tz":300,"elapsed":91,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}}},"execution_count":22,"outputs":[]},{"cell_type":"markdown","source":["### Room Creation"],"metadata":{"id":"PbQq6VtuEGI-"}},{"cell_type":"code","source":["class Room:\n","    def __init__(self, id):\n","        self.id = id\n","        self.description = \"\"\n","        self.items = []\n","        self.npcs = []\n","        self.connecting_rooms = []\n","\n","    def to_dict(self):\n","        return {\n","            \"id\": self.id,\n","            \"description\": self.description,\n","            \"items\": self.items,\n","            \"npcs\": self.npcs,\n","            \"connecting_rooms\": self.connecting_rooms\n","        }"],"metadata":{"id":"H3IAhMCJPU8r","executionInfo":{"status":"ok","timestamp":1733439312366,"user_tz":300,"elapsed":107,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["### Spawn NPC"],"metadata":{"id":"Tt7wHNGnCuv5"}},{"cell_type":"markdown","source":["### Spawn Enemy"],"metadata":{"id":"Wq4TRVvcDMng"}},{"cell_type":"markdown","source":["### Skill Check"],"metadata":{"id":"UUiksuwxDWCW"}},{"cell_type":"markdown","source":["### Combat"],"metadata":{"id":"pzPhUEr5DfCF"}},{"cell_type":"markdown","source":["# Main"],"metadata":{"id":"uYs7bzS9ASMw"}},{"cell_type":"code","source":["def main():\n","\n","  print(\"Welcome to the Dungeon Master AI Agent.\")\n","\n","  # Ask user if they want to load a game.\n","  load_choice = input(\"Do you want to load a game from a JSON file? (yes/no): \").strip().lower()\n","\n","  if load_choice == \"yes\":\n","    # If yes, prompt for filename and attempt to load the game.\n","    filename = input(\"Enter the filename (with .json extension): \")\n","\n","  else:\n","    group = group_creation()  # Create new group if not loading\n","\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"eY-J-rAcAP4h","colab":{"base_uri":"https://localhost:8080/","height":563},"executionInfo":{"status":"error","timestamp":1733439564609,"user_tz":300,"elapsed":102984,"user":{"displayName":"Sam Lothrop","userId":"07657218432918050179"}},"outputId":"208a9da2-1899-4181-b28e-dfc87196e40d"},"execution_count":25,"outputs":[{"name":"stdout","output_type":"stream","text":["Welcome to the Dungeon Master AI Agent.\n","Do you want to load a game from a JSON file? (yes/no): no\n","To start the game you need to make your group and characters!\n","What will be the name of your Adventuring Group? Gangster\n","How many members will be in your group? 2\n","What will be the name of character 1?Sloth\n","Choose a class (enter the number): \n","  1. Fighter \n","  2. Rogue \n","  3. Mage \n","1\n","Describe your character: He is a boy from the village that has beef with the bartender for refusing to serve him alcohol, and now I have been plotting to get my revenge even if it takes my entire life\n"]},{"output_type":"error","ename":"NameError","evalue":"name 'armor' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-25-c63ed73c2766>\u001b[0m in \u001b[0;36m<cell line: 16>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-25-c63ed73c2766>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mgroup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgroup_creation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Create new group if not loading\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-18-90a1b25fcdb2>\u001b[0m in \u001b[0;36mgroup_creation\u001b[0;34m()\u001b[0m\n\u001b[1;32m    261\u001b[0m     \u001b[0mchar_description\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Describe your character: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m     \u001b[0mchar_class\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclass_choices\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchar_class_num\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 263\u001b[0;31m     \u001b[0mmembs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mCharacter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchar_class\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchar_description\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    264\u001b[0m   \u001b[0mgroup_description\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Describe your group: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mGroup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgroup_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmembs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgroup_description\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-18-90a1b25fcdb2>\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, name, char_class, description, status)\u001b[0m\n\u001b[1;32m     51\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mchar_class\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'Fighter'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_hp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m95\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlvl\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 53\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m95\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlvl\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0marmor\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     54\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0matk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m85\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlvl\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     55\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mintelligence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m60\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlvl\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'armor' is not defined"]}]}]}